
Chai is a JavaScript testing library that helps you confirm that your program still behaves the way you expect it to after you make changes to your code.

Using Chai, you can write tests that describe your program's requirements and see if your program meets them.

In this, you'll learn about assertions, deep equality, truthiness, testing APIs, and other fundamentals for testing JavaScript applications.

1. Learn How JavaScript Assertions Work = isNull vs. isNotNull
2. Test if a Variable or Function is Defined = isDefined vs. isUndefined
3. Use Assert.isOK and Assert.isNotOK
    isOk() will test for a truthy value, and isNotOk() will test for a falsy value.
4.Test for Truthiness = isTrue(),isNotTrue(),isFalse() and isNotFalse() 
5.Use the Double Equals to Assert Equality : == , either assert.equal or assert.notEqual
6.Use the Triple Equals to Assert Strict Equality : === , assert.strictEqual or assert.notStrictEqual 
7.Assert Deep Equality with .deepEqual and .notDeepEqual
8.Compare the Properties of Two Elements = assert.isAbove or assert.isAtMost 
9.Test if One Value is Below or At Least as Large as Another = assert.isBelow or assert.isAtLeast 
10.Test if a Value Falls within a Specific Range = .approximately(actual, expected, delta, [message])
11.Test if a Value is an Array = assert.isArray or assert.isNotArray
12.Test if an Array Contains an Item = assert.include or assert.notInclude 
13.Test if a Value is a String = assert.isString or assert.isNotString 
14.Test if a String Contains a Substring = assert.include or assert.notInclude 
15.Use Regular Expressions to Test a String = match() asserts that the actual value matches the second argument regular expression.
16.Test if an Object has a Property = assert.property or assert.notProperty 
17.Test if a Value is of a Specific Data Structure Type = assert.typeOf or assert.notTypeOf 
18.Test if an Object is an Instance of a Constructor = assert.instanceOf or assert.notInstanceOf 
19.Run Functional Tests on API Endpoints using Chai-HTTP
  suite('GET /hello?name=[name] => "hello [name]"', function () {
  test('?name=John', function (done) {
    chai
      .request(server)
      .keepOpen()
      .get('/hello?name=John')
      .end(function (err, res) {
        assert.equal(res.status, 200, 'Response status should be 200');
        assert.equal(res.text, 'hello John', 'Response should be "hello John"');
        done();
      });
  });
});
20.Run Functional Tests on API Endpoints using Chai-HTTP II
21.Run Functional Tests on an API Response using Chai-HTTP III - PUT method
22.Run Functional Tests Using a Headless Browser
  test('Submit the surname "Polo" in the HTML form', function (done) {
  browser.fill('surname', 'Polo').then(() => {
    browser.pressButton('submit', () => {
      browser.assert.success();
      browser.assert.text('span#name', 'Marco');
      browser.assert.text('span#surname', 'Polo');
      browser.assert.elements('span#dates', 1);
      done();
    });
  });
});
23.Run Functional Tests Using a Headless Browser II